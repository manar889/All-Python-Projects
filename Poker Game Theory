{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOdC1XvXR72rz+cxLPIak5w"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fyVdu1-kjrEl","executionInfo":{"status":"ok","timestamp":1712048623389,"user_tz":-60,"elapsed":307,"user":{"displayName":"manar zmerli","userId":"04803236173079490830"}},"outputId":"efc79e0a-0bd8-4e7c-9160-6afcd13862bf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Player 1 has 140 chips\n","Player 2 has 60 chips\n"]}],"source":["import random\n","from collections import Counter\n","\n","\n","#Represents the poker game itself\n","class PokerGame:\n","    def __init__(self, players):\n","        self.players = players\n","        self.deck = list(range(1, 53))  # 52-card deck\n","        random.shuffle(self.deck)\n","        self.community_cards = []\n","        self.pot = 0\n","\n","    def deal_hands(self):\n","        hands = [self.deck[i:i+2] for i in range(0, len(self.deck), 2)]\n","        self.deck = []\n","        for player, hand in zip(self.players, hands):\n","            player.hand = hand  # Assign hand to each player\n","        return hands\n","\n","    def deal_community_cards(self, num_cards):\n","        self.community_cards = self.deck[:num_cards]\n","        self.deck = self.deck[num_cards:]\n","\n","    def simulate_round(self):\n","        # Deal hands to players\n","        hands = self.deal_hands()\n","\n","        # Simulate betting round\n","        for player in self.players:\n","            player.make_bet(self)\n","\n","        # Deal community cards\n","        self.deal_community_cards(5)\n","\n","        # Determine winner and distribute pot\n","        winner = max(self.players, key=lambda x: x.evaluate_hand(self.community_cards))\n","        winner.win(self.pot)\n","        self.pot = 0  # Reset pot after distributing winnings\n","\n","## Define a player class\n","class Player:\n","    def __init__(self, name, strategy):\n","        self.name = name  #assign a name\n","        self.chips = 100  # nÂ° of chips\n","        self.strategy = strategy       # either bet or fold\n","        self.hand = []  # hand of card\n","\n","    def make_bet(self, game):\n","        action = self.strategy.choose_action()  # Allows players to take actions during betting rounds\n","        if action == 'bet':\n","            self.chips -= 10\n","            game.pot += 10  # Increment the game pot\n","\n","    def win(self, pot):\n","        self.chips += pot\n","\n","    def evaluate_hand(self, community_cards):\n","        all_cards = community_cards + self.hand\n","        hand_rank = self.calculate_hand_rank(all_cards)\n","        return hand_rank\n","\n","    def calculate_hand_rank(self, all_cards):\n","        all_suits = [card % 4 for card in all_cards]  # strength of the player's hand\n","        all_values = [card // 4 for card in all_cards]\n","\n","        value_counter = Counter(all_values)\n","        suit_counter = Counter(all_suits)\n","\n","        for suit in range(4):\n","            if suit_counter[suit] >= 5:\n","                straight_flush_cards = [card for card in all_cards if card % 4 == suit]\n","                straight_flush_rank = self.calculate_straight_flush_rank(straight_flush_cards)\n","                return straight_flush_rank\n","\n","        for value, count in value_counter.items():\n","            if count == 4:\n","                return 8\n","\n","        if 3 in value_counter.values() and 2 in value_counter.values():\n","            return 7\n","\n","        for suit in range(4):\n","            if suit_counter[suit] >= 5:\n","                return 6\n","\n","        straight_rank = self.calculate_straight_rank(all_values)\n","        if straight_rank:\n","            return 5\n","\n","        for value, count in value_counter.items():\n","            if count == 3:\n","                return 4\n","\n","        pair_values = [value for value, count in value_counter.items() if count == 2]\n","        if len(pair_values) >= 2:\n","            return 3\n","\n","        for value, count in value_counter.items():\n","            if count == 2:\n","                return 2\n","\n","        all_cards.sort(reverse=True)\n","        return 1\n","\n","    def calculate_straight_flush_rank(self, straight_flush_cards):\n","        straight_flush_values = [card // 4 for card in straight_flush_cards]\n","        straight_flush_values.sort(reverse=True)\n","        return 9\n","\n","    def calculate_straight_rank(self, all_values):\n","        unique_values = set(all_values)\n","        if len(unique_values) < 5:\n","            return None\n","        sorted_values = sorted(unique_values, reverse=True)\n","        if 12 in sorted_values:\n","            sorted_values.append(-1)\n","        for i in range(len(sorted_values) - 4):\n","            if sorted_values[i] - sorted_values[i + 4] == 4:\n","                return 5\n","        return None\n","\n","\n","#This class defines a strategy based on Nash equilibrium.\n","class NashEquilibriumStrategy:\n","    def __init__(self, probability_of_betting):\n","        self.probability_of_betting = probability_of_betting\n","\n","    def choose_action(self):\n","        if random.random() < self.probability_of_betting:\n","            return 'bet'\n","        else:\n","            return 'fold'\n","\n","'''We will create two players with Nash equilibrium strategies and simulate 10 rounds of the poker game using the PokerGame class.\n","After the simulation, we print the final number of chips for each player.\n","'''\n","#Simulate the game\n","player1 = Player(\"Player 1\", NashEquilibriumStrategy(0.5))\n","player2 = Player(\"Player 2\", NashEquilibriumStrategy(0.5))\n","game = PokerGame([player1, player2])\n","\n","for _ in range(10):\n","    game.simulate_round()\n","\n","# Check players' chip counts after simulation\n","print(player1.name, \"has\", player1.chips, \"chips\")\n","print(player2.name, \"has\", player2.chips, \"chips\")\n"]}]}